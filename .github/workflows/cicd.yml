name: CICD

env:
  RUST_MIN_VERSION: "1.56.0"
  CARGO_TERM_COLOR: always

on:
  push:
    branches: [main]

jobs:
  check_fmt_and_clipy:
    name: Check cargo fmt
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        default: true

    - name: Run fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

    # - name: Run clippy
    #   if: success() || failure()
    #   uses: actions-rs/cargo@v1
    #   with:
    #     command: clippy
    #     args: -- -D warnings

  # TODO: min_version

  # TODO: documentation

  test:
    name: Test
    needs: [check_fmt_and_clipy]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        default: true

    - name: Run test
      uses: actions-rs/cargo@v1
      with:
        command: test

  build_and_publish:
    name: Build and Publish (${{ matrix.job.os }}-${{ matrix.job.target }})
    needs: [test]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-latest }
          - { target: x86_64-apple-darwin , os: macos-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        target: ${{ matrix.job.target }}
        default: true

    - name: Install musl tools
      if : matrix.job.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt install -qq -y musl-tools --no-install-recommends

    - name: Extract crate information
      shell: bash
      run: |
        echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
        echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
        echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
        echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=${{ matrix.job.target }}

    - name: Package for linux-musl
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        zip --junk-paths rp-${{ matrix.target }} target/${{ matrix.target }}/release/rp

    - name: Package for windows
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: |
        powershell Compress-Archive -Path target/${{ matrix.target }}/release/rp.exe -DestinationPath rp-${{ matrix.target }}.zip

    - name: Package for macOS
      if: matrix.target == 'x86_64-apple-darwin'
      run: |
        zip --junk-paths rp-${{ matrix.target }} target/${{ matrix.target }}/release/rp

    - uses: actions/upload-artifact@v2
      with:
        name: build-${{ matrix.target }}
        path: rp-${{ matrix.target }}.zip

