name: CICD

env:
  RUST_MIN_VERSION: "1.56.0"
  CARGO_TERM_COLOR: always

on:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  check_fmt_and_clipy:
    name: Check cargo fmt
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        default: true

    - name: Run fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

    # - name: Run clippy
    #   if: success() || failure()
    #   uses: actions-rs/cargo@v1
    #   with:
    #     command: clippy
    #     args: -- -D warnings

  # TODO: min_version

  # TODO: documentation

  test:
    name: Test
    needs: [check_fmt_and_clipy]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job: [ { os: ubuntu-latest }, { os: macos-latest }, { os: windows-latest } ]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        default: true

    - name: Run test
      uses: actions-rs/cargo@v1
      with:
        command: test

  build:
    name: Build and Publish (${{ matrix.job.os }}-${{ matrix.job.target }})
    needs: [test]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-latest, use-cross: true }
          - { target: x86_64-apple-darwin , os: macos-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: default
        target: ${{ matrix.job.target }}
        default: true

    - name: Install musl tools
      if : matrix.job.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt install -qq -y musl-tools --no-install-recommends
        sudo apt install -y pkg-config libssl-dev

        #echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu/" >> $GITHUB_ENV
        #echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl/" >> $GITHUB_ENV

    - name: Extract crate information
      shell: bash
      run: |
        echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
        echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
        echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
        echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: build
        args: --release --target=${{ matrix.job.target }}

    - name: Package for linux-musl
      if: matrix.job.target == 'x86_64-unknown-linux-musl'
      run: |
        zip --junk-paths rp-${{ matrix.job.target }} target/${{ matrix.job.target }}/release/rp

    - name: Package for windows
      if: matrix.job.target == 'x86_64-pc-windows-msvc'
      run: |
        powershell Compress-Archive -Path target/${{ matrix.job.target }}/release/rp.exe -DestinationPath rp-${{ matrix.job.target }}.zip

    - name: Package for macOS
      if: matrix.job.target == 'x86_64-apple-darwin'
      run: |
        zip --junk-paths rp-${{ matrix.job.target }} target/${{ matrix.job.target }}/release/rp

    - uses: actions/upload-artifact@v2
      with:
        name: build-${{ matrix.job.target }}
        path: rp-${{ matrix.job.target }}.zip

    #is-release:
    #  needs: [build]
    #  runs-on: ubuntu-latest
    #  steps:
    #    - name: Check for release
    #      id: is-release
    #      shell: bash
    #      run: |
    #        unset IS_RELEASE;
    #        if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then
    #          export IS_RELEASE="true"
    #        else
    #          export IS_RELEASE="false"
    #        fi
    #        echo "IS_RELEASE=${IS_RELEASE}" >> ${GITHUB_ENV}

  create-release:
    needs: [build]
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - run: |
          echo '${{ steps.create-release.outputs.upload_url }}' > release_upload_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: create-release
          path: release_upload_url.txt

  upload-release:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
    if: contains(github.ref, 'tags/v')
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - uses: actions/download-artifact@v1
        with:
          name: create-release
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat create-release/release_upload_url.txt)"
      - uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.target }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./build-${{ matrix.target }}/rp-${{ matrix.target }}.zip
          asset_name: rp-v${PROJECT_VERSION}-${{ matrix.target }}.zip
          asset_content_type: application/zip
